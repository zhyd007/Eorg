{"version":3,"sources":["components/Highlight.js","components/TeX/TeXBlock.js","components/TeX/modifiers/removeTeXBlock.js","components/TeX/modifiers/insertTeXBlock.js","components/RichTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["highlightCallBack","document","querySelectorAll","forEach","block","hljs","highlightBlock","KaTexOutput","katex","render","this","props","content","refs","container","displayMode","_update","prevProps","prevState","ref","onClick","React","Component","TeXBlock","state","editMode","_onClick","setState","texValue","_getValue","_startEdit","_onValueChange","evt","value","target","invalid","__parse","e","invalidTeX","_save","entityKey","getEntityAt","newContentState","contentState","mergeEntityData","_finishEdit","bind","_remove","blockProps","onRemove","getKey","onStartEdit","onFinishEdit","getEntity","getData","texContent","className","editPanel","buttonClass","onChange","disabled","removeTeXBlock","editorState","blockKey","getCurrentContent","getBlockForKey","targetRange","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","withoutTeX","Modifier","removeRange","resetBlock","setBlockType","getSelectionAfter","newState","EditorState","push","forceSelection","insertTeXBlock","contentStateWithEntity","createEntity","getLastCreatedEntityKey","newEditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","RichTextEditor","_blockRenderer","getType","component","editable","liveTeXEdits","remove","createWithContent","_removeTeX","_onChange","_insertTeX","Map","createEmpty","editorRef","createRef","focus","current","handleKeyCommand","_handleKeyCommand","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","RichUtils","keyCode","getDefaultKeyBinding","onTab","blockType","inlineStyle","hasText","getBlockMap","first","displayTeX","tex","listHTML","i","length","getElementById","innerHTML","onToggle","editorContentRaw","convertToRaw","console","log","allTeX","offset","someTeX","blocks","Math","someMath","entityMap","Object","keys","values","data","count","k","TeX","styledStartOffset","someTeXInlineStyleSort","inlineStyleRanges","o","sort","a","b","item","type","text","texMap","startOffset","styledTextLength","textStyle","style","slice","blockRendererFn","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","readOnly","spellCheck","id","CODE","backgroundColor","fontFamily","fontSize","padding","StyleButton","preventDefault","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getStartKey","map","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07e1d74d.chunk.js","sourcesContent":["import hljs from \"highlight.js\";\nimport 'highlight.js/styles/monokai.css'\n\nconst highlightCallBack = () => {\n\tdocument.querySelectorAll('pre code')\n\t\t.forEach(block => hljs.highlightBlock(block))\n}\n\nexport default highlightCallBack","import katex from 'katex';\nimport React from 'react';\n\nclass KaTexOutput extends React.Component {\n\n  _update() {\n    katex.render(\n      this.props.content,\n      this.refs.container,\n      {displayMode: true},\n    );\n  }\n\n  componentDidMount() {\n    this._update();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.content !== this.props.content) {\n      this._update();\n    }\n  }\n\n  render() {\n    return <div ref=\"container\" onClick={this.props.onClick} />;\n  }\n}\n\nclass TeXBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editMode: false};\n\n    this._onClick = () => {\n      if (this.state.editMode) {\n        return;\n      }\n\n      this.setState({\n        editMode: true,\n        texValue: this._getValue(),\n      }, () => {\n        this._startEdit();\n      });\n    };\n\n    this._onValueChange = evt => {\n      const value = evt.target.value;\n      let invalid = false;\n      try {\n        katex.__parse(value);\n      } catch (e) {\n        invalid = true;\n      } finally {\n        this.setState({\n          invalidTeX: invalid,\n          texValue: value,\n        });\n      }\n    };\n\n    this._save = () => {\n      const entityKey = this.props.block.getEntityAt(0);\n      const newContentState = this.props.contentState.mergeEntityData(\n          entityKey,\n          {content: this.state.texValue},\n      );\n      this.setState({\n        invalidTeX: false,\n        editMode: false,\n        texValue: null,\n      }, this._finishEdit.bind(this, newContentState));\n    };\n\n    this._remove = () => {\n      this.props.blockProps.onRemove(this.props.block.getKey());\n    };\n    this._startEdit = () => {\n      this.props.blockProps.onStartEdit(this.props.block.getKey());\n    };\n    this._finishEdit = (newContentState) => {\n      this.props.blockProps.onFinishEdit(\n        this.props.block.getKey(),\n        newContentState,\n      );\n    };\n  }\n\n  _getValue() {\n    return this.props.contentState\n      .getEntity(this.props.block.getEntityAt(0))\n      .getData()['content'];\n  }\n\n  render() {\n    let texContent = null;\n    if (this.state.editMode) {\n      if (this.state.invalidTeX) {\n        texContent = '';\n      } else {\n        texContent = this.state.texValue;\n      }\n    } else {\n      texContent = this._getValue();\n    }\n\n    let className = 'TeXEditor-tex';\n    if (this.state.editMode) {\n      className += ' TeXEditor-activeTeX';\n    }\n\n    let editPanel = null;\n    if (this.state.editMode) {\n      let buttonClass = 'TeXEditor-saveButton';\n      if (this.state.invalidTeX) {\n        buttonClass += ' TeXEditor-invalidButton';\n      }\n\n      editPanel =\n        <div className=\"TeXEditor-panel\">\n          <textarea\n            className=\"TeXEditor-texValue\"\n            onChange={this._onValueChange}\n            ref=\"textarea\"\n            value={this.state.texValue}\n          />\n          <div className=\"TeXEditor-buttons\">\n            <button\n              className={buttonClass}\n              disabled={this.state.invalidTeX}\n              onClick={this._save}>\n              {this.state.invalidTeX ? 'Invalid TeX' : 'Done'}\n            </button>\n            <button className=\"TeXEditor-removeButton\" onClick={this._remove}>\n              Remove\n            </button>\n          </div>\n        </div>;\n    }\n\n    return (\n      <div className={className}>\n        <KaTexOutput content={texContent} onClick={this._onClick} />\n        {editPanel}\n      </div>\n    );\n  }\n}\n\nexport default TeXBlock\n","import {EditorState, Modifier, SelectionState} from 'draft-js';\n\nexport function removeTeXBlock(editorState, blockKey) {\n  const content = editorState.getCurrentContent();\n  const block = content.getBlockForKey(blockKey);\n\n  const targetRange = new SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: block.getLength(),\n  });\n\n  const withoutTeX = Modifier.removeRange(content, targetRange, 'backward');\n  const resetBlock = Modifier.setBlockType(\n      withoutTeX,\n      withoutTeX.getSelectionAfter(),\n      'unstyled',\n  );\n\n  const newState = EditorState.push(editorState, resetBlock, 'remove-range');\n  return EditorState.forceSelection(newState, resetBlock.getSelectionAfter());\n}\n","import {\n  AtomicBlockUtils,\n  EditorState,\n} from 'draft-js';\n\nconst examples = '\\\\KaTeX';\n\nexport function insertTeXBlock(editorState) {\n  const contentState = editorState.getCurrentContent();\n  const contentStateWithEntity = contentState.createEntity(\n    'TOKEN',\n    'IMMUTABLE',\n    {content: examples},\n  );\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  const newEditorState = EditorState.set(\n    editorState,\n    {currentContent: contentStateWithEntity},\n  );\n  return AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ');\n}\n","import React from 'react';\nimport {Editor, EditorState, getDefaultKeyBinding, RichUtils, convertToRaw} from 'draft-js';\nimport './RichTextEditor.css';\nimport '../../node_modules/draft-js/dist/Draft.css';\nimport highlightCallBack from './Highlight'\nimport {Map} from \"immutable\";\nimport TeXBlock from \"./TeX/TeXBlock\";\nimport {removeTeXBlock} from \"./TeX/modifiers/removeTeXBlock\";\nimport {insertTeXBlock} from \"./TeX/modifiers/insertTeXBlock\";\nimport './TeX/TeXEditor.css'\n\n/**\n * Editor Template and KaTeX support are all referenced to Draft.js official example.\n */\n\nclass RichTextEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\teditorState: EditorState.createEmpty(),\n\t\t\tliveTeXEdits: Map(),\n\t\t};\n\n\t\tthis.editorRef = React.createRef();\n\t\tthis.focus = () => this.editorRef.current.focus();\n\t\tthis.onChange = (editorState) => this.setState({editorState});\n\n\t\tthis.handleKeyCommand = this._handleKeyCommand.bind(this);\n\t\tthis.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n\t\tthis.toggleBlockType = this._toggleBlockType.bind(this);\n\t\tthis.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n\t}\n\n\t_handleKeyCommand(command, editorState) {\n\t\tconst newState = RichUtils.handleKeyCommand(editorState, command);\n\t\tif (newState) {\n\t\t\tthis._onChange(newState);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t_mapKeyToEditorCommand(e) {\n\t\tif (e.keyCode === 9 /* TAB */) {\n\t\t\tconst newEditorState = RichUtils.onTab(\n\t\t\t\te,\n\t\t\t\tthis.state.editorState,\n\t\t\t\t4, /* maxDepth */\n\t\t\t);\n\t\t\tif (newEditorState !== this.state.editorState) {\n\t\t\t\tthis.onChange(newEditorState);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\treturn getDefaultKeyBinding(e);\n\t}\n\n\t_toggleBlockType(blockType) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleBlockType(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tblockType\n\t\t\t)\n\t\t);\n\t}\n\n\t_toggleInlineStyle(inlineStyle) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleInlineStyle(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tinlineStyle\n\t\t\t)\n\t\t);\n\t}\n\n\t_blockRenderer = (block) => {\n\t\tif (block.getType() === 'atomic') {\n\t\t\treturn {\n\t\t\t\tcomponent: TeXBlock,\n\t\t\t\teditable: false,\n\t\t\t\tprops: {\n\t\t\t\t\tonStartEdit: (blockKey) => {\n\t\t\t\t\t\tconst {liveTeXEdits} = this.state;\n\t\t\t\t\t\tthis.setState({liveTeXEdits: liveTeXEdits.set(blockKey, true)});\n\t\t\t\t\t},\n\t\t\t\t\tonFinishEdit: (blockKey, newContentState) => {\n\t\t\t\t\t\tconst {liveTeXEdits} = this.state;\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tliveTeXEdits: liveTeXEdits.remove(blockKey),\n\t\t\t\t\t\t\teditorState: EditorState.createWithContent(newContentState),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tonRemove: (blockKey) => this._removeTeX(blockKey),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t};\n\n\t_onChange = (editorState) => this.setState({editorState});\n\n\t_removeTeX = (blockKey) => {\n\t\tconst {editorState, liveTeXEdits} = this.state;\n\t\tthis.setState({\n\t\t\tliveTeXEdits: liveTeXEdits.remove(blockKey),\n\t\t\teditorState: removeTeXBlock(editorState, blockKey),\n\t\t});\n\t};\n\n\t_insertTeX = () => {\n\t\tthis.setState({\n\t\t\tliveTeXEdits: Map(),\n\t\t\teditorState: insertTeXBlock(this.state.editorState),\n\t\t});\n\t};\n\n\trender() {\n\t\tconst {editorState} = this.state;\n\n\t\t// If the user changes block type before entering any text, we can\n\t\t// either style the placeholder or hide it. Let's just hide it now.\n\t\tlet className = 'RichEditor-editor';\n\t\tlet contentState = editorState.getCurrentContent();\n\t\tif (!contentState.hasText()) {\n\t\t\tif (contentState.getBlockMap().first().getType() !== 'unstyled') {\n\t\t\t\tclassName += ' RichEditor-hidePlaceholder';\n\t\t\t}\n\t\t}\n\n\t\tconst convertToTeX = () => {\n\t\t\tconst editorContentRaw = convertToRaw(contentState);\n\t\t\tconsole.log(editorContentRaw)\n\n\t\t\tlet allTeX = [], offset = 0, length = 0, someTeX = editorContentRaw.blocks\n\t\t\tlet Math = [], someMath = editorContentRaw.entityMap\n\n\t\t\tif (Object.keys(someMath).length) {\n\t\t\t\tfor (let i = 0; i < Object.keys(someMath).length; i++) {\n\t\t\t\t\tMath.push(Object.values(someMath)[i].data.content)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet count = 0\n\t\t\tfor (let k = 0; k < someTeX.length; k++) {\n\t\t\t\tlet TeX = ''\n\t\t\t\tlet styledStartOffset = [], someTeXInlineStyleSort = [];\n\n\t\t\t\tfor (let i = 0; i < someTeX[k].inlineStyleRanges.length; i++) {\n\t\t\t\t\tlet o = someTeX[k].inlineStyleRanges[i].offset;\n\t\t\t\t\tstyledStartOffset.push(o);\n\t\t\t\t}\n\n\t\t\t\tstyledStartOffset.sort((a, b) => a - b);\n\n\t\t\t\tfor (let i = 0; i < styledStartOffset.length; i++) {\n\t\t\t\t\tfor (let item in someTeX[k].inlineStyleRanges) {\n\t\t\t\t\t\tif (someTeX[k].inlineStyleRanges[item].offset === styledStartOffset[i]) {\n\t\t\t\t\t\t\tsomeTeXInlineStyleSort.push(someTeX[k].inlineStyleRanges[item]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * ** text split algorithm **\n\t\t\t\t * split with inlineStyledText offset and its length\n\t\t\t\t */\n\n\t\t\t\tif (someTeX[k].inlineStyleRanges.length === 0) {\n\t\t\t\t\tif (someTeX[k].type === 'unstyled') {\n\t\t\t\t\t\tTeX += someTeX[k].text\n\t\t\t\t\t} else if (someTeX[k].type === 'atomic') {\n\t\t\t\t\t\tsomeTeX[k].text = Math[count]\n\t\t\t\t\t\tTeX += someTeX[k].text\n\t\t\t\t\t\tcount++\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTeX += texMap[someTeX[k].type] + '{' + someTeX[k].text + '}'\n\t\t\t\t\t}\n\t\t\t\t\tTeX += '<br />'\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < someTeXInlineStyleSort.length; i++) {\n\t\t\t\t\t\tlet startOffset = styledStartOffset[i];\n\t\t\t\t\t\tlet styledTextLength = someTeXInlineStyleSort[i].length;\n\t\t\t\t\t\tlet textStyle = someTeXInlineStyleSort[i].style;\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tTeX += someTeX[k].text.slice(0, startOffset)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tTeX += someTeX[k].text.slice(offset + length, startOffset)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTeX += texMap[textStyle] + '{' + someTeX[k].text.slice(startOffset, startOffset + styledTextLength) + '}'\n\n\t\t\t\t\t\tif (i === someTeXInlineStyleSort.length - 1) {\n\t\t\t\t\t\t\tTeX += someTeX[k].text.slice(startOffset + styledTextLength) + '<br/>'\n\t\t\t\t\t\t}\n\t\t\t\t\t\toffset = startOffset;\n\t\t\t\t\t\tlength = styledTextLength\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tallTeX.push(TeX)\n\t\t\t}\n\n\t\t\tdisplayTeX(allTeX)\n\t\t}\n\n\t\tconst displayTeX = (tex) => {\n\t\t\tlet listHTML = '<pre><code class=\"latex\">';\n\t\t\tfor (let i = 0; i < tex.length; i++) {\n\t\t\t\tlet note = tex[i];\n\t\t\t\tlistHTML += note;\n\t\t\t}\n\t\t\tlistHTML += '</code></pre>';\n\t\t\tdocument.getElementById('tex').innerHTML = listHTML;\n\t\t\thighlightCallBack()\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='two'>\n\t\t\t\t<div className=\"RichEditor-root\">\n\t\t\t\t\t<div className=\"Menu\">\n\t\t\t\t\t<BlockStyleControls\n\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\tonToggle={this.toggleBlockType}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineStyleControls\n\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\tonToggle={this.toggleInlineStyle}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={this._insertTeX}\n\t\t\t\t\t\tclassName=\"TeXEditor-insert math\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{'Math'}\n\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={convertToTeX}\n\t\t\t\t\t\t\tclassName='TeXEditor-insert display'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{'Display'}\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t\t<div className={className} onClick={this.focus}>\n\t\t\t\t\t\t<Editor\n\t\t\t\t\t\t\tblockRendererFn={this._blockRenderer}\n\t\t\t\t\t\t\tblockStyleFn={getBlockStyle}\n\t\t\t\t\t\t\tcustomStyleMap={styleMap}\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\thandleKeyCommand={this.handleKeyCommand}\n\t\t\t\t\t\t\tkeyBindingFn={this.mapKeyToEditorCommand}\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tplaceholder=\"Tell a story...\"\n\t\t\t\t\t\t\treadOnly={this.state.liveTeXEdits.count()}\n\t\t\t\t\t\t\tref={this.editorRef}\n\t\t\t\t\t\t\tspellCheck={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id='tex'/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst texMap = {\n\t'header-one': '\\\\section',\n\t'header-two': '\\\\subsection',\n\t'header-three': '\\\\subsubsection',\n\t'BOLD': '\\\\textbf',\n\t'ITALIC': '\\\\textit',\n\t'UNDERLINE': '\\\\underline',\n\t'CODE': '\\\\texttt'\n};\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n\tCODE: {\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.05)',\n\t\tfontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n\t\tfontSize: 16,\n\t\tpadding: 2,\n\t},\n};\n\nfunction getBlockStyle(block) {\n\tswitch (block.getType()) {\n\t\tcase 'blockquote':\n\t\t\treturn 'RichEditor-blockquote';\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nclass StyleButton extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onToggle = (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.props.onToggle(this.props.style);\n\t\t};\n\t}\n\n\trender() {\n\t\tlet className = 'RichEditor-styleButton';\n\t\tif (this.props.active) {\n\t\t\tclassName += ' RichEditor-activeButton';\n\t\t}\n\n\t\treturn (\n\t\t\t<span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n\t\t);\n\t}\n}\n\nconst BLOCK_TYPES = [\n\t{label: 'H1', style: 'header-one'},\n\t{label: 'H2', style: 'header-two'},\n\t{label: 'H3', style: 'header-three'},\n\t// {label: 'H4', style: 'header-four'},\n\t// {label: 'H5', style: 'header-five'},\n\t// {label: 'H6', style: 'header-six'},\n\t// {label: 'Blockquote', style: 'blockquote'},\n\t// {label: 'UL', style: 'unordered-list-item'},\n\t// {label: 'OL', style: 'ordered-list-item'},\n\t// {label: 'Code Block', style: 'code-block'},\n];\n\nconst BlockStyleControls = (props) => {\n\tconst {editorState} = props;\n\tconst selection = editorState.getSelection();\n\tconst blockType = editorState\n\t\t.getCurrentContent()\n\t\t.getBlockForKey(selection.getStartKey())\n\t\t.getType();\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{BLOCK_TYPES.map((type) =>\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={type.style === blockType}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nconst INLINE_STYLES = [\n\t{label: 'Bold', style: 'BOLD'},\n\t{label: 'Italic', style: 'ITALIC'},\n\t{label: 'Underline', style: 'UNDERLINE'},\n\t{label: 'Monospace', style: 'CODE'},\n];\n\nconst InlineStyleControls = (props) => {\n\tconst currentStyle = props.editorState.getCurrentInlineStyle();\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{INLINE_STYLES.map((type) =>\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={currentStyle.has(type.style)}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default RichTextEditor;","import React from 'react';\nimport './App.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RichTextEditor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}