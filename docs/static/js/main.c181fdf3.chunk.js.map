{"version":3,"sources":["components/Highlight.js","components/TeX/TeXBlock.js","components/TeX/modifiers/removeTeXBlock.js","components/TeX/modifiers/insertTeXBlock.js","components/RichTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["highlightCallBack","document","querySelectorAll","forEach","block","hljs","highlightBlock","KaTexOutput","props","container","React","createRef","this","update","prevProps","content","katex","render","current","displayMode","ref","onClick","Component","TeXBlock","state","editMode","textareaRef","setState","texValue","getValue","startEdit","onValueChange","evt","value","target","invalid","__parse","e","invalidTeX","save","entityKey","getEntityAt","newContentState","contentState","mergeEntityData","finishEdit","bind","remove","blockProps","onRemove","getKey","onStartEdit","onFinishEdit","getEntity","getData","texContent","className","editPanel","buttonClass","onChange","disabled","type","removeTeXBlock","editorState","blockKey","getCurrentContent","getBlockForKey","targetRange","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","withoutTeX","Modifier","removeRange","resetBlock","setBlockType","getSelectionAfter","newState","EditorState","push","forceSelection","insertTeXBlock","contentStateWithEntity","createEntity","getLastCreatedEntityKey","newEditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","RichTextEditor","blockRenderer","getType","component","editable","liveTeXEdits","createWithContent","removeTeX","insertTeX","prevState","Map","createEmpty","editorRef","focus","handleKeyCommand","mapKeyToEditorCommand","toggleBlockType","toggleInlineStyle","command","RichUtils","keyCode","getDefaultKeyBinding","onTab","blockType","inlineStyle","hasText","getBlockMap","first","displayTeX","tex","listHTML","i","length","getElementById","innerHTML","onToggle","editorContentRaw","convertToRaw","allTeX","offset","someTeX","blocks","Math","someMath","entityMap","Object","keys","values","data","count","k","TeX","styledStartOffset","someTeXInlineStyleSort","someTeXInline","inlineStyleRanges","o","sort","a","b","j","text","texMap","startOffset","styledTextLength","textStyle","style","slice","blockRendererFn","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","readOnly","spellCheck","id","BOLD","ITALIC","UNDERLINE","CODE","backgroundColor","fontFamily","fontSize","padding","StyleButton","active","onMouseDown","preventDefault","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getStartKey","map","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAQeA,G,OALW,WACzBC,SAASC,iBAAiB,YACxBC,SAAQ,SAACC,GAAD,OAAWC,IAAKC,eAAeF,Q,iBCFpCG,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,UAAYC,IAAMC,YAFL,E,gEAMlBC,KAAKC,W,yCAGaC,GACdA,EAAUC,UAAYH,KAAKJ,MAAMO,SACpCH,KAAKC,W,+BAKNG,IAAMC,OACLL,KAAKJ,MAAMO,QACXH,KAAKH,UAAUS,QACf,CAAEC,aAAa,M,+BAKhB,OAAO,yBAAKC,IAAKR,KAAKH,UAAWY,QAAST,KAAKJ,MAAMa,c,GAzB7BX,IAAMY,WA8JjBC,E,kDAhId,WAAYf,GAAQ,IAAD,8BAClB,cAAMA,IACDgB,MAAQ,CAAEC,UAAU,GACzB,EAAKC,YAAchB,IAAMC,YAEzB,EAAKU,QAAU,WACV,EAAKG,MAAMC,UAIf,EAAKE,SAAS,CACbF,UAAU,EACVG,SAAU,EAAKC,aACb,WACF,EAAKC,gBAIP,EAAKC,cAAgB,SAACC,GAAS,IACtBC,EAAUD,EAAIE,OAAdD,MACJE,GAAU,EACd,IACCnB,IAAMoB,QAAQH,GACb,MAAOI,GACRF,GAAU,EAHX,QAKC,EAAKR,SAAS,CACbW,WAAYH,EACZP,SAAUK,MAKb,EAAKM,KAAO,WACX,IAAMC,EAAY,EAAKhC,MAAMJ,MAAMqC,YAAY,GACzCC,EAAkB,EAAKlC,MAAMmC,aAAaC,gBAC/CJ,EACA,CAAEzB,QAAS,EAAKS,MAAMI,WAEvB,EAAKD,SAAS,CACbW,YAAY,EACZb,UAAU,EACVG,SAAU,MACR,EAAKiB,WAAWC,KAAhB,eAA2BJ,KAG/B,EAAKK,OAAS,WACb,EAAKvC,MAAMwC,WAAWC,SAAS,EAAKzC,MAAMJ,MAAM8C,WAEjD,EAAKpB,UAAY,WAChB,EAAKtB,MAAMwC,WAAWG,YAAY,EAAK3C,MAAMJ,MAAM8C,WAEpD,EAAKL,WAAa,SAACH,GAClB,EAAKlC,MAAMwC,WAAWI,aACrB,EAAK5C,MAAMJ,MAAM8C,SACjBR,IAvDgB,E,uDA6DlB,OAAO9B,KAAKJ,MAAMmC,aAChBU,UAAUzC,KAAKJ,MAAMJ,MAAMqC,YAAY,IACvCa,UAAUvC,U,+BAIZ,IAAIwC,EAAa,KAGfA,EAFE3C,KAAKY,MAAMC,SACVb,KAAKY,MAAMc,WACD,GAEA1B,KAAKY,MAAMI,SAGZhB,KAAKiB,WAGnB,IAAI2B,EAAY,gBACZ5C,KAAKY,MAAMC,WACd+B,GAAa,wBAGd,IAAIC,EAAY,KAChB,GAAI7C,KAAKY,MAAMC,SAAU,CACxB,IAAIiC,EAAc,uBACd9C,KAAKY,MAAMc,aACdoB,GAAe,4BAGhBD,EACC,yBAAKD,UAAU,mBACd,8BACCA,UAAU,qBACVG,SAAU/C,KAAKmB,cACfX,IAAKR,KAAKc,YAAYR,QACtBe,MAAOrB,KAAKY,MAAMI,WAEnB,yBAAK4B,UAAU,qBACd,4BACCA,UAAWE,EACXE,SAAUhD,KAAKY,MAAMc,WACrBjB,QAAST,KAAK2B,KACdsB,KAAK,UAEJjD,KAAKY,MAAMc,WAAa,cAAgB,QAE1C,4BACCkB,UAAU,yBACVnC,QAAST,KAAKmC,OACdc,KAAK,UAHN,YAYJ,OACC,yBAAKL,UAAWA,GACf,kBAAC,EAAD,CAAazC,QAASwC,EAAYlC,QAAST,KAAKS,UAC/CoC,O,GA3HkB/C,IAAMY,WCRdwC,MAtBf,SAAwBC,EAAaC,GACpC,IAAMjD,EAAUgD,EAAYE,oBACtB7D,EAAQW,EAAQmD,eAAeF,GAE/BG,EAAc,IAAIC,iBAAe,CACtCC,UAAWL,EACXM,aAAc,EACdC,SAAUP,EACVQ,YAAapE,EAAMqE,cAGdC,EAAaC,WAASC,YAAY7D,EAASoD,EAAa,YACxDU,EAAaF,WAASG,aAC3BJ,EACAA,EAAWK,oBACX,YAGKC,EAAWC,cAAYC,KAAKnB,EAAac,EAAY,gBAC3D,OAAOI,cAAYE,eAAeH,EAAUH,EAAWE,sBCCzCK,MAff,SAAwBrB,GACvB,IACMsB,EADetB,EAAYE,oBACWqB,aAC3C,QACA,YACA,CAAEvE,QAPa,YASVyB,EAAY6C,EAAuBE,0BACnCC,EAAiBP,cAAYQ,IAClC1B,EACA,CAAE2B,eAAgBL,IAEnB,OAAOM,mBAAiBC,kBAAkBJ,EAAgBhD,EAAW,MCFhEqD,G,yDACL,WAAYrF,GAAQ,IAAD,8BAClB,cAAMA,IAgBPsF,cAAgB,SAAC1F,GAChB,MAAwB,WAApBA,EAAM2F,UACF,CACNC,UAAWzE,EACX0E,UAAU,EACVzF,MAAO,CACN2C,YAAa,SAACa,GAAc,IACnBkC,EAAiB,EAAK1E,MAAtB0E,aACR,EAAKvE,SAAS,CAAEuE,aAAcA,EAAaT,IAAIzB,GAAU,MAE1DZ,aAAc,SAACY,EAAUtB,GAAqB,IACrCwD,EAAiB,EAAK1E,MAAtB0E,aACR,EAAKvE,SAAS,CACbuE,aAAcA,EAAanD,OAAOiB,GAClCD,YAAakB,cAAYkB,kBAAkBzD,MAG7CO,SAAU,SAACe,GAAD,OAAc,EAAKoC,UAAUpC,MAInC,MAtCW,EAyCnBL,SAAW,SAACI,GAAD,OAAiB,EAAKpC,SAAS,CAAEoC,iBAzCzB,EA2CnBqC,UAAY,SAACpC,GAAc,IAAD,EACa,EAAKxC,MAAnCuC,EADiB,EACjBA,YAAamC,EADI,EACJA,aACrB,EAAKvE,SAAS,CACbuE,aAAcA,EAAanD,OAAOiB,GAClCD,YAAaD,EAAeC,EAAaC,MA/CxB,EAmDnBqC,UAAY,WACX,EAAK1E,UAAS,SAAC2E,GAAD,MAAgB,CAC7BJ,aAAcK,cACdxC,YAAaqB,EAAekB,EAAUvC,kBApDvC,EAAKvC,MAAQ,CACZuC,YAAakB,cAAYuB,cACzBN,aAAcK,eAGf,EAAKE,UAAY/F,IAAMC,YACvB,EAAK+F,MAAQ,kBAAM,EAAKD,UAAUvF,QAAQwF,SAC1C,EAAK/C,SAAW,SAACI,GAAD,OAAiB,EAAKpC,SAAS,CAAEoC,iBAEjD,EAAK4C,iBAAmB,EAAKA,iBAAiB7D,KAAtB,gBACxB,EAAK8D,sBAAwB,EAAKA,sBAAsB9D,KAA3B,gBAC7B,EAAK+D,gBAAkB,EAAKA,gBAAgB/D,KAArB,gBACvB,EAAKgE,kBAAoB,EAAKA,kBAAkBhE,KAAvB,gBAdP,E,6DA0DFiE,EAAShD,GACzB,IAAMiB,EAAWgC,YAAUL,iBAAiB5C,EAAagD,GACzD,QAAI/B,IACHpE,KAAK+C,SAASqB,IACP,K,4CAKa3C,GACrB,GAAkB,IAAdA,EAAE4E,QAWN,OAAOC,+BAAqB7E,GAV3B,IAAMmD,EAAiBwB,YAAUG,MAChC9E,EACAzB,KAAKY,MAAMuC,YACX,GAEGyB,IAAmB5E,KAAKY,MAAMuC,aACjCnD,KAAK+C,SAAS6B,K,sCAOD4B,GACfxG,KAAK+C,SACJqD,YAAUH,gBACTjG,KAAKY,MAAMuC,YACXqD,M,wCAKeC,GACjBzG,KAAK+C,SACJqD,YAAUF,kBACTlG,KAAKY,MAAMuC,YACXsD,M,+BAKO,IACDtD,EAAgBnD,KAAKY,MAArBuC,YAIJP,EAAY,oBACVb,EAAeoB,EAAYE,oBAC5BtB,EAAa2E,WACoC,aAAjD3E,EAAa4E,cAAcC,QAAQzB,YACtCvC,GAAa,+BAIf,IA2FMiE,EAAa,SAACC,GAEnB,IADA,IAAIC,EAAW,4BACNC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,GAAK,EAAG,CAEvCD,GADaD,EAAIE,GAGlBD,GAAY,gBACZ1H,SAAS6H,eAAe,OAAOC,UAAYJ,EAC3C3H,KAGD,OACC,yBAAKwD,UAAU,iBACd,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,QACd,kBAAC,EAAD,CACCO,YAAaA,EACbiE,SAAUpH,KAAKiG,kBAEhB,kBAAC,EAAD,CACC9C,YAAaA,EACbiE,SAAUpH,KAAKkG,oBAEhB,yBAAKtD,UAAU,wCACd,4BACCnC,QAAST,KAAKyF,UACd7C,UAAU,8BACVK,KAAK,UAHN,QAOA,4BACCxC,QA3He,WACpB,IAAM4G,EAAmBC,uBAAavF,GAEhCwF,EAAS,GACXC,EAAS,EACTP,EAAS,EAEZQ,EAAUJ,EAAiBK,OACtBC,EAAO,GAEZC,EAAWP,EAAiBQ,UAE7B,GAAIC,OAAOC,KAAKH,GAAUX,OACzB,IAAK,IAAID,EAAI,EAAGA,EAAIc,OAAOC,KAAKH,GAAUX,OAAQD,GAAK,EACtDW,EAAKrD,KAAKwD,OAAOE,OAAOJ,GAAUZ,GAAGiB,KAAK9H,SAY5C,IARA,IAAI+H,EAAQ,EAQHC,EAAI,EAAGA,EAAIV,EAAQR,OAAQkB,GAAK,EAAG,CAO3C,IANA,IAAIC,EAAM,GACJC,EAAoB,GAEzBC,EAAyB,GACpBC,EAAgBd,EAAQU,GAAGK,kBAExBxB,EAAI,EAAGA,EAAIuB,EAActB,OAAQD,GAAK,EAAG,CACjD,IAAMyB,EAAIF,EAAcvB,GAAGQ,OAC3Ba,EAAkB/D,KAAKmE,GAGxBJ,EAAkBK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErC,IAAK,IAAI5B,EAAI,EAAGA,EAAIqB,EAAkBpB,OAAQD,GAAK,EAClD,IAAK,IAAI6B,EAAI,EAAGA,EAAIf,OAAOE,OAAOO,GAAetB,OAAQ4B,GAAK,EACzDf,OAAOE,OAAOO,GAAeM,GAAGrB,SAAWa,EAAkBrB,IAChEsB,EAAuBhE,KAAKwD,OAAOE,OAAOO,GAAeM,IAU5D,GAA6B,IAAzBN,EAActB,OACO,aAApBQ,EAAQU,GAAGlF,KACdmF,GAAOX,EAAQU,GAAGW,KACY,WAApBrB,EAAQU,GAAGlF,MACrBwE,EAAQU,GAAGW,KAAOnB,EAAKO,GACvBE,GAAOX,EAAQU,GAAGW,KAClBZ,GAAS,GAETE,GAAG,UAAOW,EAAOtB,EAAQU,GAAGlF,MAAzB,YAAkCwE,EAAQU,GAAGW,KAA7C,KAEJV,GAAO,cAEP,IAAK,IAAIpB,EAAI,EAAGA,EAAIsB,EAAuBrB,OAAQD,GAAK,EAAG,CAC1D,IAAMgC,EAAcX,EAAkBrB,GAChCiC,EAAmBX,EAAuBtB,GAAGC,OAC7CiC,EAAYZ,EAAuBtB,GAAGmC,MAG3Cf,GADS,IAANpB,EACIS,EAAQU,GAAGW,KAAKM,MAAM,EAAGJ,GAEzBvB,EAAQU,GAAGW,KAAKM,MAAM5B,EAASP,EAAQ+B,GAE/CZ,GAAG,UAAOW,EAAOG,GAAd,YAA4BzB,EAAQU,GAAGW,KAAKM,MAAMJ,EAAaA,EAAcC,GAA7E,KAECjC,IAAMsB,EAAuBrB,OAAS,IACzCmB,GAAG,UAAOX,EAAQU,GAAGW,KAAKM,MAAMJ,EAAcC,GAA3C,UAEJzB,EAASwB,EACT/B,EAASgC,EAIX1B,EAAOjD,KAAK8D,GAGbvB,EAAWU,IAoCN3E,UAAU,OACVK,KAAK,UAHN,aASF,yBAAKL,UAAWA,EAAWnC,QAAST,KAAK8F,OACxC,kBAAC,SAAD,CACCuD,gBAAiBrJ,KAAKkF,cACtBoE,aAAcC,EACdC,eAAgBC,EAChBtG,YAAaA,EACb4C,iBAAkB/F,KAAK+F,iBACvB2D,aAAc1J,KAAKgG,sBACnBjD,SAAU/C,KAAK+C,SACf4G,YAAY,kBACZC,SAAU5J,KAAKY,MAAM0E,aAAa4C,QAClC1H,IAAKR,KAAK6F,UACVgE,YAAU,MAIb,yBAAKC,GAAG,OACP,uBAAGlH,UAAU,YAAb,2C,GAtQwB9C,IAAMY,YA6Q7BqI,EAAS,CACd,aAAc,YACd,aAAc,eACd,eAAgB,kBAChBgB,KAAM,WACNC,OAAQ,WACRC,UAAW,cACXC,KAAM,YAIDT,EAAW,CAChBS,KAAM,CACLC,gBAAiB,sBACjBC,WAAY,gDACZC,SAAU,GACVC,QAAS,IAIX,SAASf,EAAc/J,GACtB,OAAQA,EAAM2F,WACd,IAAK,aACJ,MAAO,wBACR,QACC,OAAO,MAIT,IAAMoF,EAAc,SAAC3K,GACpB,IAIIgD,EAAY,yBAKhB,OAJIhD,EAAM4K,SACT5H,GAAa,4BAIb,0BAAMA,UAAWA,EAAW6H,YAVZ,SAAChJ,GACjBA,EAAEiJ,iBACF9K,EAAMwH,SAASxH,EAAMuJ,SASnBvJ,EAAM+K,QAKJC,EAAc,CACnB,CAAED,MAAO,KAAMxB,MAAO,cACtB,CAAEwB,MAAO,KAAMxB,MAAO,cACtB,CAAEwB,MAAO,KAAMxB,MAAO,iBAUjB0B,EAAqB,SAACjL,GAAW,IAC9BuD,EAAgBvD,EAAhBuD,YACF2H,EAAY3H,EAAY4H,eACxBvE,EAAYrD,EAChBE,oBACAC,eAAewH,EAAUE,eACzB7F,UAEF,OACC,yBAAKvC,UAAU,uBACbgI,EAAYK,KAAI,SAAChI,GAAD,OAChB,kBAAC,EAAD,CACCiI,IAAKjI,EAAK0H,MACVH,OAAQvH,EAAKkG,QAAU3C,EACvBmE,MAAO1H,EAAK0H,MACZvD,SAAUxH,EAAMwH,SAChB+B,MAAOlG,EAAKkG,aAOXgC,EAAgB,CACrB,CAAER,MAAO,OAAQxB,MAAO,QACxB,CAAEwB,MAAO,SAAUxB,MAAO,UAC1B,CAAEwB,MAAO,YAAaxB,MAAO,aAC7B,CAAEwB,MAAO,YAAaxB,MAAO,SAGxBiC,EAAsB,SAACxL,GAC5B,IAAMyL,EAAezL,EAAMuD,YAAYmI,wBAEvC,OACC,yBAAK1I,UAAU,uBACbuI,EAAcF,KAAI,SAAChI,GAAD,OAClB,kBAAC,EAAD,CACCiI,IAAKjI,EAAK0H,MACVH,OAAQa,EAAaE,IAAItI,EAAKkG,OAC9BwB,MAAO1H,EAAK0H,MACZvD,SAAUxH,EAAMwH,SAChB+B,MAAOlG,EAAKkG,aAOFlE,IC7XAuG,MARf,WACC,OACC,yBAAK5I,UAAU,OACd,kBAAC,EAAD,QCKiB6I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzL,OACR,kBAAC,IAAM0L,WAAP,KACC,kBAAC,EAAD,OAED1M,SAAS6H,eAAe,SDyHnB,kBAAmB8E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c181fdf3.chunk.js","sourcesContent":["import hljs from 'highlight.js'\nimport 'highlight.js/styles/zenburn.css'\n\nconst highlightCallBack = () => {\n\tdocument.querySelectorAll('pre code')\n\t\t.forEach((block) => hljs.highlightBlock(block))\n}\n\nexport default highlightCallBack\n","import katex from 'katex'\nimport React from 'react'\n\nclass KaTexOutput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.container = React.createRef()\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.update()\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.content !== this.props.content) {\n\t\t\tthis.update()\n\t\t}\n\t}\n\n\tupdate() {\n\t\tkatex.render(\n\t\t\tthis.props.content,\n\t\t\tthis.container.current,\n\t\t\t{ displayMode: true },\n\t\t)\n\t}\n\n\trender() {\n\t\treturn <div ref={this.container} onClick={this.props.onClick} />\n\t}\n}\n\nclass TeXBlock extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { editMode: false }\n\t\tthis.textareaRef = React.createRef()\n\n\t\tthis.onClick = () => {\n\t\t\tif (this.state.editMode) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\teditMode: true,\n\t\t\t\ttexValue: this.getValue(),\n\t\t\t}, () => {\n\t\t\t\tthis.startEdit()\n\t\t\t})\n\t\t}\n\n\t\tthis.onValueChange = (evt) => {\n\t\t\tconst { value } = evt.target\n\t\t\tlet invalid = false\n\t\t\ttry {\n\t\t\t\tkatex.__parse(value)\n\t\t\t} catch (e) {\n\t\t\t\tinvalid = true\n\t\t\t} finally {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinvalidTeX: invalid,\n\t\t\t\t\ttexValue: value,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis.save = () => {\n\t\t\tconst entityKey = this.props.block.getEntityAt(0)\n\t\t\tconst newContentState = this.props.contentState.mergeEntityData(\n\t\t\t\tentityKey,\n\t\t\t\t{ content: this.state.texValue },\n\t\t\t)\n\t\t\tthis.setState({\n\t\t\t\tinvalidTeX: false,\n\t\t\t\teditMode: false,\n\t\t\t\ttexValue: null,\n\t\t\t}, this.finishEdit.bind(this, newContentState))\n\t\t}\n\n\t\tthis.remove = () => {\n\t\t\tthis.props.blockProps.onRemove(this.props.block.getKey())\n\t\t}\n\t\tthis.startEdit = () => {\n\t\t\tthis.props.blockProps.onStartEdit(this.props.block.getKey())\n\t\t}\n\t\tthis.finishEdit = (newContentState) => {\n\t\t\tthis.props.blockProps.onFinishEdit(\n\t\t\t\tthis.props.block.getKey(),\n\t\t\t\tnewContentState,\n\t\t\t)\n\t\t}\n\t}\n\n\tgetValue() {\n\t\treturn this.props.contentState\n\t\t\t.getEntity(this.props.block.getEntityAt(0))\n\t\t\t.getData().content\n\t}\n\n\trender() {\n\t\tlet texContent = null\n\t\tif (this.state.editMode) {\n\t\t\tif (this.state.invalidTeX) {\n\t\t\t\ttexContent = ''\n\t\t\t} else {\n\t\t\t\ttexContent = this.state.texValue\n\t\t\t}\n\t\t} else {\n\t\t\ttexContent = this.getValue()\n\t\t}\n\n\t\tlet className = 'TeXEditor-tex'\n\t\tif (this.state.editMode) {\n\t\t\tclassName += ' TeXEditor-activeTeX'\n\t\t}\n\n\t\tlet editPanel = null\n\t\tif (this.state.editMode) {\n\t\t\tlet buttonClass = 'TeXEditor-saveButton'\n\t\t\tif (this.state.invalidTeX) {\n\t\t\t\tbuttonClass += ' TeXEditor-invalidButton'\n\t\t\t}\n\n\t\t\teditPanel = (\n\t\t\t\t<div className=\"TeXEditor-panel\">\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tclassName=\"TeXEditor-texValue\"\n\t\t\t\t\t\tonChange={this.onValueChange}\n\t\t\t\t\t\tref={this.textareaRef.current}\n\t\t\t\t\t\tvalue={this.state.texValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"TeXEditor-buttons\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={buttonClass}\n\t\t\t\t\t\t\tdisabled={this.state.invalidTeX}\n\t\t\t\t\t\t\tonClick={this.save}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.invalidTeX ? 'Invalid TeX' : 'Done'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"TeXEditor-removeButton\"\n\t\t\t\t\t\t\tonClick={this.remove}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<KaTexOutput content={texContent} onClick={this.onClick} />\n\t\t\t\t{editPanel}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TeXBlock\n","import { EditorState, Modifier, SelectionState } from 'draft-js'\n\nfunction removeTeXBlock(editorState, blockKey) {\n\tconst content = editorState.getCurrentContent()\n\tconst block = content.getBlockForKey(blockKey)\n\n\tconst targetRange = new SelectionState({\n\t\tanchorKey: blockKey,\n\t\tanchorOffset: 0,\n\t\tfocusKey: blockKey,\n\t\tfocusOffset: block.getLength(),\n\t})\n\n\tconst withoutTeX = Modifier.removeRange(content, targetRange, 'backward')\n\tconst resetBlock = Modifier.setBlockType(\n\t\twithoutTeX,\n\t\twithoutTeX.getSelectionAfter(),\n\t\t'unstyled',\n\t)\n\n\tconst newState = EditorState.push(editorState, resetBlock, 'remove-range')\n\treturn EditorState.forceSelection(newState, resetBlock.getSelectionAfter())\n}\n\nexport default removeTeXBlock\n","import {\n\tAtomicBlockUtils,\n\tEditorState,\n} from 'draft-js'\n\nconst examples = '\\\\KaTeX'\n\nfunction insertTeXBlock(editorState) {\n\tconst contentState = editorState.getCurrentContent()\n\tconst contentStateWithEntity = contentState.createEntity(\n\t\t'TOKEN',\n\t\t'IMMUTABLE',\n\t\t{ content: examples },\n\t)\n\tconst entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n\tconst newEditorState = EditorState.set(\n\t\teditorState,\n\t\t{ currentContent: contentStateWithEntity },\n\t)\n\treturn AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ')\n}\n\nexport default insertTeXBlock\n","import React from 'react'\nimport {\n\tEditor, EditorState, getDefaultKeyBinding, RichUtils, convertToRaw,\n} from 'draft-js'\nimport './RichTextEditor.css'\nimport '../../node_modules/draft-js/dist/Draft.css'\nimport { Map } from 'immutable'\nimport highlightCallBack from './Highlight'\nimport TeXBlock from './TeX/TeXBlock'\nimport removeTeXBlock from './TeX/modifiers/removeTeXBlock'\nimport insertTeXBlock from './TeX/modifiers/insertTeXBlock'\nimport './TeX/TeXEditor.css'\n\n/**\n * Editor Template and KaTeX support are all referenced to Draft.js official example.\n */\n\nclass RichTextEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\teditorState: EditorState.createEmpty(),\n\t\t\tliveTeXEdits: Map(),\n\t\t}\n\n\t\tthis.editorRef = React.createRef()\n\t\tthis.focus = () => this.editorRef.current.focus()\n\t\tthis.onChange = (editorState) => this.setState({ editorState })\n\n\t\tthis.handleKeyCommand = this.handleKeyCommand.bind(this)\n\t\tthis.mapKeyToEditorCommand = this.mapKeyToEditorCommand.bind(this)\n\t\tthis.toggleBlockType = this.toggleBlockType.bind(this)\n\t\tthis.toggleInlineStyle = this.toggleInlineStyle.bind(this)\n\t}\n\n\tblockRenderer = (block) => {\n\t\tif (block.getType() === 'atomic') {\n\t\t\treturn {\n\t\t\t\tcomponent: TeXBlock,\n\t\t\t\teditable: false,\n\t\t\t\tprops: {\n\t\t\t\t\tonStartEdit: (blockKey) => {\n\t\t\t\t\t\tconst { liveTeXEdits } = this.state\n\t\t\t\t\t\tthis.setState({ liveTeXEdits: liveTeXEdits.set(blockKey, true) })\n\t\t\t\t\t},\n\t\t\t\t\tonFinishEdit: (blockKey, newContentState) => {\n\t\t\t\t\t\tconst { liveTeXEdits } = this.state\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tliveTeXEdits: liveTeXEdits.remove(blockKey),\n\t\t\t\t\t\t\teditorState: EditorState.createWithContent(newContentState),\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t\tonRemove: (blockKey) => this.removeTeX(blockKey),\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn null\n\t};\n\n\tonChange = (editorState) => this.setState({ editorState });\n\n\tremoveTeX = (blockKey) => {\n\t\tconst { editorState, liveTeXEdits } = this.state\n\t\tthis.setState({\n\t\t\tliveTeXEdits: liveTeXEdits.remove(blockKey),\n\t\t\teditorState: removeTeXBlock(editorState, blockKey),\n\t\t})\n\t};\n\n\tinsertTeX = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\tliveTeXEdits: Map(),\n\t\t\teditorState: insertTeXBlock(prevState.editorState),\n\t\t}))\n\t};\n\n\thandleKeyCommand(command, editorState) {\n\t\tconst newState = RichUtils.handleKeyCommand(editorState, command)\n\t\tif (newState) {\n\t\t\tthis.onChange(newState)\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tmapKeyToEditorCommand(e) {\n\t\tif (e.keyCode === 9 /* TAB */) {\n\t\t\tconst newEditorState = RichUtils.onTab(\n\t\t\t\te,\n\t\t\t\tthis.state.editorState,\n\t\t\t\t4, /* maxDepth */\n\t\t\t)\n\t\t\tif (newEditorState !== this.state.editorState) {\n\t\t\t\tthis.onChange(newEditorState)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\treturn getDefaultKeyBinding(e)\n\t}\n\n\ttoggleBlockType(blockType) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleBlockType(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tblockType,\n\t\t\t),\n\t\t)\n\t}\n\n\ttoggleInlineStyle(inlineStyle) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleInlineStyle(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tinlineStyle,\n\t\t\t),\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { editorState } = this.state\n\n\t\t// If the user changes block type before entering any text, we can\n\t\t// either style the placeholder or hide it. Let's just hide it now.\n\t\tlet className = 'RichEditor-editor'\n\t\tconst contentState = editorState.getCurrentContent()\n\t\tif (!contentState.hasText()) {\n\t\t\tif (contentState.getBlockMap().first().getType() !== 'unstyled') {\n\t\t\t\tclassName += ' RichEditor-hidePlaceholder'\n\t\t\t}\n\t\t}\n\n\t\tconst convertToTeX = () => {\n\t\t\tconst editorContentRaw = convertToRaw(contentState)\n\n\t\t\tconst allTeX = []\n\t\t\tlet offset = 0\n\t\t\tlet length = 0\n\t\t\tconst\n\t\t\t\tsomeTeX = editorContentRaw.blocks\n\t\t\tconst Math = []\n\t\t\tconst\n\t\t\t\tsomeMath = editorContentRaw.entityMap\n\n\t\t\tif (Object.keys(someMath).length) {\n\t\t\t\tfor (let i = 0; i < Object.keys(someMath).length; i += 1) {\n\t\t\t\t\tMath.push(Object.values(someMath)[i].data.content)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet count = 0\n\n\t\t\t/**\n\t\t\t * TODO optimization\n\t\t\t *  -- Oops!!!\n\t\t\t *  O(n^3) algorithm\n\t\t\t */\n\n\t\t\tfor (let k = 0; k < someTeX.length; k += 1) {\n\t\t\t\tlet TeX = ''\n\t\t\t\tconst styledStartOffset = []\n\t\t\t\tconst\n\t\t\t\t\tsomeTeXInlineStyleSort = []\n\t\t\t\tconst someTeXInline = someTeX[k].inlineStyleRanges\n\n\t\t\t\tfor (let i = 0; i < someTeXInline.length; i += 1) {\n\t\t\t\t\tconst o = someTeXInline[i].offset\n\t\t\t\t\tstyledStartOffset.push(o)\n\t\t\t\t}\n\n\t\t\t\tstyledStartOffset.sort((a, b) => a - b)\n\n\t\t\t\tfor (let i = 0; i < styledStartOffset.length; i += 1) {\n\t\t\t\t\tfor (let j = 0; j < Object.values(someTeXInline).length; j += 1) {\n\t\t\t\t\t\tif (Object.values(someTeXInline)[j].offset === styledStartOffset[i]) {\n\t\t\t\t\t\t\tsomeTeXInlineStyleSort.push(Object.values(someTeXInline)[j])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * ** text split algorithm **\n\t\t\t\t * split with inlineStyledText offset and its length\n\t\t\t\t */\n\n\t\t\t\tif (someTeXInline.length === 0) {\n\t\t\t\t\tif (someTeX[k].type === 'unstyled') {\n\t\t\t\t\t\tTeX += someTeX[k].text\n\t\t\t\t\t} else if (someTeX[k].type === 'atomic') {\n\t\t\t\t\t\tsomeTeX[k].text = Math[count]\n\t\t\t\t\t\tTeX += someTeX[k].text\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTeX += `${texMap[someTeX[k].type]}{${someTeX[k].text}}`\n\t\t\t\t\t}\n\t\t\t\t\tTeX += '<br />'\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < someTeXInlineStyleSort.length; i += 1) {\n\t\t\t\t\t\tconst startOffset = styledStartOffset[i]\n\t\t\t\t\t\tconst styledTextLength = someTeXInlineStyleSort[i].length\n\t\t\t\t\t\tconst textStyle = someTeXInlineStyleSort[i].style\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tTeX += someTeX[k].text.slice(0, startOffset)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tTeX += someTeX[k].text.slice(offset + length, startOffset)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTeX += `${texMap[textStyle]}{${someTeX[k].text.slice(startOffset, startOffset + styledTextLength)}}`\n\n\t\t\t\t\t\tif (i === someTeXInlineStyleSort.length - 1) {\n\t\t\t\t\t\t\tTeX += `${someTeX[k].text.slice(startOffset + styledTextLength)}<br/>`\n\t\t\t\t\t\t}\n\t\t\t\t\t\toffset = startOffset\n\t\t\t\t\t\tlength = styledTextLength\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tallTeX.push(TeX)\n\t\t\t}\n\n\t\t\tdisplayTeX(allTeX)\n\t\t}\n\n\t\tconst displayTeX = (tex) => {\n\t\t\tlet listHTML = '<pre><code class=\"latex\">'\n\t\t\tfor (let i = 0; i < tex.length; i += 1) {\n\t\t\t\tconst note = tex[i]\n\t\t\t\tlistHTML += note\n\t\t\t}\n\t\t\tlistHTML += '</code></pre>'\n\t\t\tdocument.getElementById('tex').innerHTML = listHTML\n\t\t\thighlightCallBack()\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"double-column\">\n\t\t\t\t<div className=\"RichEditor-root\">\n\t\t\t\t\t<div className=\"Menu\">\n\t\t\t\t\t\t<BlockStyleControls\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\tonToggle={this.toggleBlockType}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InlineStyleControls\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\tonToggle={this.toggleInlineStyle}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"RichEditor-controls TeXEditor-insert\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={this.insertTeX}\n\t\t\t\t\t\t\t\tclassName=\"math RichEditor-styleButton\"\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMath\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={convertToTeX}\n\t\t\t\t\t\t\t\tclassName=\"save\"\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tpreview\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={className} onClick={this.focus}>\n\t\t\t\t\t\t<Editor\n\t\t\t\t\t\t\tblockRendererFn={this.blockRenderer}\n\t\t\t\t\t\t\tblockStyleFn={getBlockStyle}\n\t\t\t\t\t\t\tcustomStyleMap={styleMap}\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\thandleKeyCommand={this.handleKeyCommand}\n\t\t\t\t\t\t\tkeyBindingFn={this.mapKeyToEditorCommand}\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tplaceholder=\"Tell a story...\"\n\t\t\t\t\t\t\treadOnly={this.state.liveTeXEdits.count()}\n\t\t\t\t\t\t\tref={this.editorRef}\n\t\t\t\t\t\t\tspellCheck\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"tex\">\n\t\t\t\t\t<p className=\"compiled\">% LaTeX code will appear below...</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst texMap = {\n\t'header-one': '\\\\section',\n\t'header-two': '\\\\subsection',\n\t'header-three': '\\\\subsubsection',\n\tBOLD: '\\\\textbf',\n\tITALIC: '\\\\textit',\n\tUNDERLINE: '\\\\underline',\n\tCODE: '\\\\texttt',\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n\tCODE: {\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.05)',\n\t\tfontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n\t\tfontSize: 16,\n\t\tpadding: 2,\n\t},\n}\n\nfunction getBlockStyle(block) {\n\tswitch (block.getType()) {\n\tcase 'blockquote':\n\t\treturn 'RichEditor-blockquote'\n\tdefault:\n\t\treturn null\n\t}\n}\n\nconst StyleButton = (props) => {\n\tconst onToggle = (e) => {\n\t\te.preventDefault()\n\t\tprops.onToggle(props.style)\n\t}\n\tlet className = 'RichEditor-styleButton'\n\tif (props.active) {\n\t\tclassName += ' RichEditor-activeButton'\n\t}\n\n\treturn (\n\t\t<span className={className} onMouseDown={onToggle}>\n\t\t\t{props.label}\n\t\t</span>\n\t)\n}\n\nconst BLOCK_TYPES = [\n\t{ label: 'H1', style: 'header-one' },\n\t{ label: 'H2', style: 'header-two' },\n\t{ label: 'H3', style: 'header-three' },\n\t// {label: 'H4', style: 'header-four'},\n\t// {label: 'H5', style: 'header-five'},\n\t// {label: 'H6', style: 'header-six'},\n\t// {label: 'Blockquote', style: 'blockquote'},\n\t// {label: 'UL', style: 'unordered-list-item'},\n\t// {label: 'OL', style: 'ordered-list-item'},\n\t// {label: 'Code Block', style: 'code-block'},\n]\n\nconst BlockStyleControls = (props) => {\n\tconst { editorState } = props\n\tconst selection = editorState.getSelection()\n\tconst blockType = editorState\n\t\t.getCurrentContent()\n\t\t.getBlockForKey(selection.getStartKey())\n\t\t.getType()\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{BLOCK_TYPES.map((type) => (\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={type.style === blockType}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nconst INLINE_STYLES = [\n\t{ label: 'Bold', style: 'BOLD' },\n\t{ label: 'Italic', style: 'ITALIC' },\n\t{ label: 'Underline', style: 'UNDERLINE' },\n\t{ label: 'Monospace', style: 'CODE' },\n]\n\nconst InlineStyleControls = (props) => {\n\tconst currentStyle = props.editorState.getCurrentInlineStyle()\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{INLINE_STYLES.map((type) => (\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={currentStyle.has(type.style)}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default RichTextEditor\n","import React from 'react'\nimport './App.css'\nimport RichTextEditor from './components/RichTextEditor'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<RichTextEditor />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}