{"version":3,"sources":["components/TeX/TeXBlock.js","components/Table/TableBlock.js","components/BlockComponent.js","components/TeX/modifiers/removeTeXBlock.js","components/TeX/modifiers/insertTeXBlock.js","components/Table/ModalTable.js","components/Table/modifiers/createTable.js","components/convertContent/convert.js","components/previewPDF/preview.js","components/baseUrl/baseUrl.js","components/RichTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["KaTexOutput","content","onClick","container","React","useRef","prevProps","value","ref","useEffect","current","usePrevious","katex","render","displayMode","TeXBlock","props","state","editMode","textareaRef","createRef","setState","texValue","getValue","startEdit","onValueChange","evt","target","invalid","__parse","e","invalidTeX","save","entityKey","block","getEntityAt","newContentState","contentState","mergeEntityData","finishEdit","bind","remove","blockProps","onRemove","getKey","onStartEdit","onFinishTeXEdit","this","getEntity","getData","texContent","className","editPanel","buttonClass","onChange","disabled","type","Component","TableOutput","row","column","caption","cell","rows","rowsTh","colsTh","useState","coordinate","setCoordinate","i","push","key","cols","j","id","trTarget","contentEditable","onBlur","x","y","innerHTML","onFinishTableEdit","TableBlock","shape","BlockComponent","media","getType","removeTeXBlock","editorState","blockKey","getCurrentContent","getBlockForKey","targetRange","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","withoutTeX","Modifier","removeRange","resetBlock","setBlockType","getSelectionAfter","newState","EditorState","forceSelection","insertTeXBlock","contentStateWithEntity","createEntity","getLastCreatedEntityKey","newEditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","tableShape","ModalTable","buttonLabel","modal","setModal","rowRef","columnRef","captionRef","toggle","color","Modal","isOpen","ModalHeader","ModalBody","Form","Row","form","Col","md","FormGroup","Label","for","Input","name","innerRef","ModalFooter","Button","tableData","createTable","length","Object","fromEntries","Array","from","_","allTeX","texMap","BOLD","ITALIC","UNDERLINE","CODE","convertToTeX","editorContentRaw","convertToRaw","offset","someTeX","blocks","Math","someMath","entityMap","keys","values","data","count","k","TeX","styledStartOffset","someTeXInlineStyleSort","someTeXInline","inlineStyleRanges","o","sort","a","b","text","startOffset","styledTextLength","textStyle","style","slice","getPDF","fetch","method","headers","then","res","blob","fileURL","URL","createObjectURL","document","getElementById","src","RichTextEditor","blockRenderer","component","editable","liveCustomBlockEdits","createWithContent","removeTeX","insertTeX","prevState","Map","createEmpty","editorRef","focus","handleKeyCommand","mapKeyToEditorCommand","toggleBlockType","toggleInlineStyle","command","RichUtils","keyCode","getDefaultKeyBinding","onTab","blockType","inlineStyle","hasText","getBlockMap","first","isMobile","onToggle","console","log","setTimeout","opts","body","JSON","stringify","json","blockRendererFn","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","readOnly","spellCheck","title","width","height","backgroundColor","fontFamily","fontSize","padding","StyleButton","active","onMouseDown","preventDefault","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getStartKey","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5003c1d.chunk.js","sourcesContent":["import katex from 'katex'\nimport React from 'react'\n\nconst KaTexOutput = ({ content, onClick }) => {\n\tconst container = React.useRef(null)\n\tconst prevProps = usePrevious(content)\n\n\tReact.useEffect(() => {\n\t\tif (prevProps !== content) {\n\t\t\tupdate()\n\t\t}\n\t})\n\n\tfunction usePrevious(value) {\n\t\tconst ref = React.useRef(null)\n\t\tReact.useEffect(() => {\n\t\t\tref.current = value\n\t\t})\n\t\treturn ref.current\n\t}\n\n\tfunction update() {\n\t\tkatex.render(\n\t\t\tcontent,\n\t\t\tcontainer.current,\n\t\t\t{ displayMode: true },\n\t\t)\n\t}\n\n\treturn <div ref={container} onClick={onClick} />\n}\n\nclass TeXBlock extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { editMode: false }\n\t\tthis.textareaRef = React.createRef()\n\n\t\tthis.onClick = () => {\n\t\t\tif (this.state.editMode) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\teditMode: true,\n\t\t\t\ttexValue: this.getValue(),\n\t\t\t}, () => {\n\t\t\t\tthis.startEdit()\n\t\t\t})\n\t\t}\n\n\t\tthis.onValueChange = (evt) => {\n\t\t\tconst { value } = evt.target\n\t\t\tlet invalid = false\n\t\t\ttry {\n\t\t\t\tkatex.__parse(value)\n\t\t\t} catch (e) {\n\t\t\t\tinvalid = true\n\t\t\t} finally {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinvalidTeX: invalid,\n\t\t\t\t\ttexValue: value,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis.save = () => {\n\t\t\tconst entityKey = this.props.block.getEntityAt(0)\n\t\t\tconst newContentState = this.props.contentState.mergeEntityData(\n\t\t\t\tentityKey,\n\t\t\t\t{ content: this.state.texValue },\n\t\t\t)\n\t\t\tthis.setState({\n\t\t\t\tinvalidTeX: false,\n\t\t\t\teditMode: false,\n\t\t\t\ttexValue: null,\n\t\t\t}, this.finishEdit.bind(this, newContentState))\n\t\t}\n\n\t\tthis.remove = () => {\n\t\t\tthis.props.blockProps.onRemove(this.props.block.getKey())\n\t\t}\n\t\tthis.startEdit = () => {\n\t\t\tthis.props.blockProps.onStartEdit(this.props.block.getKey())\n\t\t}\n\t\tthis.finishEdit = (newContentState) => {\n\t\t\tthis.props.blockProps.onFinishTeXEdit(\n\t\t\t\tthis.props.block.getKey(),\n\t\t\t\tnewContentState,\n\t\t\t)\n\t\t}\n\t}\n\n\tgetValue() {\n\t\treturn this.props.contentState\n\t\t\t.getEntity(this.props.block.getEntityAt(0))\n\t\t\t.getData().content\n\t}\n\n\trender() {\n\t\tlet texContent = null\n\t\tif (this.state.editMode) {\n\t\t\tif (this.state.invalidTeX) {\n\t\t\t\ttexContent = ''\n\t\t\t} else {\n\t\t\t\ttexContent = this.state.texValue\n\t\t\t}\n\t\t} else {\n\t\t\ttexContent = this.getValue()\n\t\t}\n\n\t\tlet className = 'TeXEditor-tex'\n\t\tif (this.state.editMode) {\n\t\t\tclassName += ' TeXEditor-activeTeX'\n\t\t}\n\n\t\tlet editPanel = null\n\t\tif (this.state.editMode) {\n\t\t\tlet buttonClass = 'TeXEditor-saveButton'\n\t\t\tif (this.state.invalidTeX) {\n\t\t\t\tbuttonClass += ' TeXEditor-invalidButton'\n\t\t\t}\n\n\t\t\teditPanel = (\n\t\t\t\t<div className=\"TeXEditor-panel\">\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tclassName=\"TeXEditor-texValue\"\n\t\t\t\t\t\tonChange={this.onValueChange}\n\t\t\t\t\t\tref={this.textareaRef.current}\n\t\t\t\t\t\tvalue={this.state.texValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"TeXEditor-buttons\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={buttonClass}\n\t\t\t\t\t\t\tdisabled={this.state.invalidTeX}\n\t\t\t\t\t\t\tonClick={this.save}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.invalidTeX ? 'Invalid TeX' : 'Done'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"TeXEditor-removeButton\"\n\t\t\t\t\t\t\tonClick={this.remove}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<KaTexOutput content={texContent} onClick={this.onClick} />\n\t\t\t\t{editPanel}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TeXBlock\n","import React from 'react'\n\nconst TableOutput = (props) => {\n\tconst {\n\t\trow, column, caption, cell, block, blockProps,\n\t} = props\n\tconst container = React.useRef(null)\n\n\t/**\n\t * if rowNum === 1\n\t *  tBody = (thead>tr>th*colNum{heading $})\n\t *      +\n\t *          (tbody>tr*rowNum - 1>td*colNum{cell $})\n\t * else\n\t *  tBody = tbody>tr*rowNum>td*colNum{cell $}\n\t */\n\n\tconst rows = []\n\tconst rowsTh = []\n\tconst colsTh = []\n\n\tconst [coordinate, setCoordinate] = React.useState([])\n\n\tfunction handleClick(evt) {\n\t\tconst trTarget = evt.target\n\t\tblockProps.onStartEdit(block.getKey())\n\t\ttrTarget.contentEditable = true\n\t}\n\n\tfunction handleBlur(evt) {\n\t\tconst trTarget = evt.target\n\t\ttrTarget.contentEditable = false\n\n\t\t// find the coordinate of the node clicked\n\t\tconst x = coordinate[0]\n\t\tconst y = coordinate[1]\n\n\t\t// update shape.cell[x][y]\n\t\tcell[x][y] = trTarget.innerHTML\n\t\tblockProps.onFinishTableEdit(block.getKey())\n\t}\n\n\t// colsTh\n\tfor (let i = 0; i < column; i += 1) {\n\t\tcolsTh.push(<th key={i}>{cell[0][i]}</th>)\n\t}\n\n\t// rowsTh\n\trowsTh.push(\n\t\t// TODO key-1\n\t\t<thead key=\"hhh\">\n\t\t\t<tr>{colsTh}</tr>\n\t\t</thead>,\n\t)\n\n\t// tbody\n\tif (row > 1) {\n\t\tfor (let i = 1; i < row; i += 1) {\n\t\t\tconst cols = [] // look out, it's local in for loop, not out like @row\n\t\t\tfor (let j = 0; j < column; j += 1) {\n\t\t\t\tcols.push(\n\t\t\t\t\t// eslint-disable-next-line max-len\n\t\t\t\t\t// eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions\n\t\t\t\t\t<td\n\t\t\t\t\t\tkey={i + j} // TODO key-2\n\t\t\t\t\t\tonClick={() => setCoordinate([i, j])}\n\t\t\t\t\t\tid={`Tooltip-${i + j}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{cell[i][j]}\n\t\t\t\t\t</td>,\n\t\t\t\t)\n\t\t\t}\n\t\t\trows.push(<tr key={i}>{cols}</tr>) // TODO key-3\n\t\t}\n\t}\n\n\treturn (\n\t\t// eslint-disable-next-line max-len\n\t\t// eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions\n\t\t<table className=\"hoverTable\" onClick={handleClick} ref={container} onBlur={handleBlur}>\n\t\t\t<caption>{caption}</caption>\n\t\t\t{rowsTh}\n\t\t\t<tbody>{rows}</tbody>\n\t\t</table>\n\t)\n}\n\nconst TableBlock = (props) => {\n\tconst { contentState, block, blockProps } = props\n\n\tconst entity = contentState.getEntity(\n\t\tblock.getEntityAt(0),\n\t)\n\tconst shape = entity.getData()\n\n\treturn (\n\t\t<TableOutput\n\t\t\trow={shape.row}\n\t\t\tcolumn={shape.column}\n\t\t\tcaption={shape.caption}\n\t\t\tcell={shape.cell}\n\t\t\tblock={block}\n\t\t\tblockProps={blockProps}\n\t\t/>\n\t)\n}\n\nexport default TableBlock\n","import React from 'react'\nimport TeXBlock from './TeX/TeXBlock'\nimport TableBlock from './Table/TableBlock'\n\nconst BlockComponent = (props) => {\n\tconst entity = props.contentState.getEntity(\n\t\tprops.block.getEntityAt(0),\n\t)\n\tconst type = entity.getType()\n\n\tlet media\n\tif (type === 'TOKEN') {\n\t\tmedia = (\n\t\t\t<TeXBlock\n\t\t\t\tblockProps={props.blockProps}\n\t\t\t\tblock={props.block}\n\t\t\t\tcontentState={props.contentState}\n\t\t\t/>\n\t\t)\n\t} else if (type === 'TABLE') {\n\t\tmedia = (\n\t\t\t<TableBlock\n\t\t\t\tblockProps={props.blockProps}\n\t\t\t\tblock={props.block}\n\t\t\t\tcontentState={props.contentState}\n\t\t\t/>\n\t\t)\n\t}\n\n\treturn media\n}\n\nexport default BlockComponent\n","import { EditorState, Modifier, SelectionState } from 'draft-js'\n\nfunction removeTeXBlock(editorState, blockKey) {\n\tconst content = editorState.getCurrentContent()\n\tconst block = content.getBlockForKey(blockKey)\n\n\tconst targetRange = new SelectionState({\n\t\tanchorKey: blockKey,\n\t\tanchorOffset: 0,\n\t\tfocusKey: blockKey,\n\t\tfocusOffset: block.getLength(),\n\t})\n\n\tconst withoutTeX = Modifier.removeRange(content, targetRange, 'backward')\n\tconst resetBlock = Modifier.setBlockType(\n\t\twithoutTeX,\n\t\twithoutTeX.getSelectionAfter(),\n\t\t'unstyled',\n\t)\n\n\tconst newState = EditorState.push(editorState, resetBlock, 'remove-range')\n\treturn EditorState.forceSelection(newState, resetBlock.getSelectionAfter())\n}\n\nexport default removeTeXBlock\n","import {\n\tAtomicBlockUtils,\n\tEditorState,\n} from 'draft-js'\n\nconst examples = '\\\\LaTeX'\n\nfunction insertTeXBlock(editorState) {\n\tconst contentState = editorState.getCurrentContent()\n\tconst contentStateWithEntity = contentState.createEntity(\n\t\t'TOKEN',\n\t\t'IMMUTABLE',\n\t\t{ content: examples },\n\t)\n\tconst entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n\tconst newEditorState = EditorState.set(\n\t\teditorState,\n\t\t{ currentContent: contentStateWithEntity },\n\t)\n\treturn AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ')\n}\n\nexport default insertTeXBlock\n","import React, { useState } from 'react'\nimport {\n\tButton, Modal, ModalHeader, ModalBody, ModalFooter,\n\tCol, Row, Form, FormGroup, Label, Input,\n} from 'reactstrap'\n\nexport const tableShape = []\n\nconst ModalTable = (props) => {\n\tconst {\n\t\tbuttonLabel,\n\t\tclassName,\n\t\tonClick,\n\t} = props\n\n\tconst [modal, setModal] = useState(false)\n\tconst rowRef = React.useRef(null)\n\tconst columnRef = React.useRef(null)\n\tconst captionRef = React.useRef(null)\n\n\tconst toggle = () => setModal(!modal)\n\n\tconst handleClick = () => {\n\t\tconst tableData = {\n\t\t\trow: rowRef.current.value,\n\t\t\tcolumn: columnRef.current.value,\n\t\t\tcaption: captionRef.current.value,\n\t\t}\n\t\ttableShape.push(tableData)\n\t\tonClick()\n\t\ttoggle()\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<button color=\"danger\" onClick={toggle} type=\"button\" className=\"math RichEditor-styleButton\">{buttonLabel}</button>\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={className}>\n\t\t\t\t<ModalHeader toggle={toggle}>Modal title</ModalHeader>\n\t\t\t\t<ModalBody>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Row form>\n\t\t\t\t\t\t\t<Col md={6}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"tableRow\">Row</Label>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tname=\"row\"\n\t\t\t\t\t\t\t\t\t\tid=\"tableRow\"\n\t\t\t\t\t\t\t\t\t\tinnerRef={rowRef}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col md={6}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"tableColumn\">Column</Label>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tname=\"column\"\n\t\t\t\t\t\t\t\t\t\tid=\"tableColumn\"\n\t\t\t\t\t\t\t\t\t\tinnerRef={columnRef}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row form>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"tableTitle\">Title</Label>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\t\t\tid=\"tableTitle\"\n\t\t\t\t\t\t\t\t\t\tinnerRef={captionRef}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Form>\n\t\t\t\t</ModalBody>\n\t\t\t\t<ModalFooter>\n\t\t\t\t\t<Button color=\"primary\" onClick={handleClick}>\n\t\t\t\t\t\tYes\n\t\t\t\t\t</Button>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n\t\t\t\t</ModalFooter>\n\t\t\t</Modal>\n\t\t</>\n\t)\n}\n\nexport default ModalTable\n","import {\n\tAtomicBlockUtils,\n\tEditorState,\n} from 'draft-js'\n\nimport { tableShape } from '../ModalTable'\n\nfunction createTable(editorState) {\n\tconst contentState = editorState.getCurrentContent()\n\tconst { row, column, caption } = tableShape[tableShape.length - 1]\n\t/**\n\t * cell = {\n\t *     0: [\"cell-0,0\", \"cell-0,1\", ..., \"cell-0,m\"],\n\t *     1: [\"cell-1,0\", \"cell-1,1\", ..., \"cell-1,m\"],\n\t *     ...,\n\t *     n: [\"cell-n,0\", \"cell-n,1\", ..., \"cell-n,m\"],\n\t * }\n\t */\n\tconst cell = Object.fromEntries(Array.from(\n\t\t{ length: row },\n\t\t// eslint-disable-next-line no-shadow\n\t\t(_, i) => [i, Array.from({ length: column }, (_, j) => `cell-${i},${j}`)],\n\t))\n\n\tconst contentStateWithEntity = contentState.createEntity(\n\t\t'TABLE',\n\t\t'IMMUTABLE',\n\t\t{\n\t\t\trow, column, caption, cell,\n\t\t},\n\t)\n\tconst entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n\tconst newEditorState = EditorState.set(\n\t\teditorState,\n\t\t{ currentContent: contentStateWithEntity },\n\t)\n\treturn AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ')\n}\n\nexport default createTable\n","import { convertToRaw } from 'draft-js'\n\nexport const allTeX = []\n\nconst convertToTeX = (contentState) => {\n\tconst editorContentRaw = convertToRaw(contentState)\n\n\tallTeX.length = 0\n\tlet offset = 0\n\tlet length = 0\n\tconst\n\t\tsomeTeX = editorContentRaw.blocks\n\tconst Math = []\n\tconst\n\t\tsomeMath = editorContentRaw.entityMap\n\n\t// Blocks Processing\n\tif (Object.keys(someMath).length) {\n\t\tfor (let i = 0; i < Object.keys(someMath).length; i += 1) { // Iterating <entityMap> ...\n\t\t\tif (someMath[i].type === 'TOKEN') {\n\t\t\t\tMath.push(Object.values(someMath)[i].data.content)\n\t\t\t} else if (someMath[i].type === 'TABLE') {\n\t\t\t\t// TODO table\n\n\t\t\t\tMath.push('sorry, but the table feature has not finished !!!')\n\t\t\t}\n\t\t}\n\t}\n\n\tlet count = 0\n\n\t/**\n\t * TODO optimization\n\t *  -- Oops!!!\n\t *  O(n^3) algorithm\n\t */\n\n\tfor (let k = 0; k < someTeX.length; k += 1) { // Iterating <blocks> ...\n\t\tlet TeX = ''\n\t\tconst styledStartOffset = []\n\t\tconst\n\t\t\tsomeTeXInlineStyleSort = []\n\t\tconst someTeXInline = someTeX[k].inlineStyleRanges\n\n\t\tfor (let i = 0; i < someTeXInline.length; i += 1) {\n\t\t\tconst o = someTeXInline[i].offset\n\t\t\tstyledStartOffset.push(o)\n\t\t}\n\n\t\tstyledStartOffset.sort((a, b) => a - b)\n\n\t\tfor (let i = 0; i < styledStartOffset.length; i += 1) {\n\t\t\tfor (let j = 0; j < Object.values(someTeXInline).length; j += 1) {\n\t\t\t\tif (Object.values(someTeXInline)[j].offset === styledStartOffset[i]) {\n\t\t\t\t\tsomeTeXInlineStyleSort.push(Object.values(someTeXInline)[j])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * ** text split algorithm **\n\t\t * split with inlineStyledText offset and its length\n\t\t */\n\n\t\tif (someTeXInline.length === 0) {\n\t\t\tif (someTeX[k].type === 'unstyled') {\n\t\t\t\tTeX += someTeX[k].text\n\t\t\t} else if (someTeX[k].type === 'atomic') {\n\t\t\t\tsomeTeX[k].text = Math[count]\n\t\t\t\tTeX += someTeX[k].text\n\t\t\t\tcount += 1\n\t\t\t} else {\n\t\t\t\tTeX += `${texMap[someTeX[k].type]}{${someTeX[k].text}}`\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < someTeXInlineStyleSort.length; i += 1) {\n\t\t\t\tconst startOffset = styledStartOffset[i]\n\t\t\t\tconst styledTextLength = someTeXInlineStyleSort[i].length\n\t\t\t\tconst textStyle = someTeXInlineStyleSort[i].style\n\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tTeX += someTeX[k].text.slice(0, startOffset)\n\t\t\t\t} else {\n\t\t\t\t\tTeX += someTeX[k].text.slice(offset + length, startOffset)\n\t\t\t\t}\n\t\t\t\tTeX += `${texMap[textStyle]}{${someTeX[k].text.slice(startOffset, startOffset + styledTextLength)}}`\n\n\t\t\t\tif (i === someTeXInlineStyleSort.length - 1) {\n\t\t\t\t\tTeX += `${someTeX[k].text.slice(startOffset + styledTextLength)}`\n\t\t\t\t}\n\t\t\t\toffset = startOffset\n\t\t\t\tlength = styledTextLength\n\t\t\t}\n\t\t}\n\n\t\tallTeX.push(TeX)\n\t}\n}\n\nconst texMap = {\n\t'header-one': '\\\\section',\n\t'header-two': '\\\\subsection',\n\t'header-three': '\\\\subsubsection',\n\tBOLD: '\\\\textbf',\n\tITALIC: '\\\\textit',\n\tUNDERLINE: '\\\\underline',\n\tCODE: '\\\\texttt',\n}\n\nexport default convertToTeX\n","import baseUrl from '../baseUrl/baseUrl'\n\nexport function postData(opts) {\n\tfetch(`${baseUrl}draftJS`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(opts),\n\t})\n\t\t.then((res) => res.json())\n\t\t.then((data) => console.log('posted data:', data))\n}\n\nexport const getPDF = () => {\n\tfetch(`${baseUrl}draftJS`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/pdf',\n\t\t},\n\t})\n\t\t.then((res) => {\n\t\t\tres.blob()\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst fileURL = URL.createObjectURL(data)\n\t\t\t\t\tconst pdf = document.getElementById('pdf')\n\t\t\t\t\tpdf.src = fileURL\n\t\t\t\t\t// window.open(fileURL)\n\t\t\t\t})\n\t\t})\n}\n","const baseUrl = 'http://localhost:3000/'\n\nexport default baseUrl\n","import React from 'react'\nimport {\n\tEditor, EditorState, getDefaultKeyBinding, RichUtils,\n} from 'draft-js'\nimport './RichTextEditor.css'\nimport 'draft-js/dist/Draft.css'\nimport { Map } from 'immutable'\nimport { isMobile } from 'react-device-detect'\nimport BlockComponent from './BlockComponent'\nimport removeTeXBlock from './TeX/modifiers/removeTeXBlock'\nimport insertTeXBlock from './TeX/modifiers/insertTeXBlock'\nimport createTable from './Table/modifiers/createTable'\nimport ModalTable from './Table/ModalTable'\nimport convertToTeX, { allTeX } from './convertContent/convert'\nimport { postData, getPDF } from './previewPDF/preview'\nimport './TeX/TeXEditor.css'\nimport './Table/Table.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n/**\n * Editor Template and KaTeX support are all referenced to Draft.js official example.\n */\n\nclass RichTextEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\teditorState: EditorState.createEmpty(),\n\t\t\tliveCustomBlockEdits: Map(),\n\t\t\tdata: {},\n\t\t}\n\n\t\tthis.editorRef = React.createRef()\n\t\tthis.focus = () => this.editorRef.current.focus()\n\t\tthis.onChange = (editorState) => this.setState({ editorState })\n\n\t\tthis.handleKeyCommand = this.handleKeyCommand.bind(this)\n\t\tthis.mapKeyToEditorCommand = this.mapKeyToEditorCommand.bind(this)\n\t\tthis.toggleBlockType = this.toggleBlockType.bind(this)\n\t\tthis.toggleInlineStyle = this.toggleInlineStyle.bind(this)\n\t}\n\n\tblockRenderer = (block) => {\n\t\tif (block.getType() === 'atomic') {\n\t\t\treturn {\n\t\t\t\tcomponent: BlockComponent,\n\t\t\t\teditable: false,\n\t\t\t\tprops: {\n\t\t\t\t\tonStartEdit: (blockKey) => {\n\t\t\t\t\t\tconst { liveCustomBlockEdits } = this.state\n\t\t\t\t\t\tthis.setState({ liveCustomBlockEdits: liveCustomBlockEdits.set(blockKey, true) })\n\t\t\t\t\t},\n\t\t\t\t\tonFinishTeXEdit: (blockKey, newContentState) => {\n\t\t\t\t\t\tconst { liveCustomBlockEdits } = this.state\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tliveCustomBlockEdits: liveCustomBlockEdits.remove(blockKey),\n\t\t\t\t\t\t\teditorState: EditorState.createWithContent(newContentState),\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t\tonFinishTableEdit: (blockKey) => {\n\t\t\t\t\t\tconst { liveCustomBlockEdits } = this.state\n\t\t\t\t\t\tthis.setState({ liveCustomBlockEdits: liveCustomBlockEdits.remove(blockKey) })\n\t\t\t\t\t},\n\t\t\t\t\tonRemove: (blockKey) => this.removeTeX(blockKey),\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn null\n\t};\n\n\tonChange = (editorState) => this.setState({ editorState });\n\n\tremoveTeX = (blockKey) => {\n\t\tconst { editorState, liveCustomBlockEdits } = this.state\n\t\tthis.setState({\n\t\t\tliveCustomBlockEdits: liveCustomBlockEdits.remove(blockKey),\n\t\t\teditorState: removeTeXBlock(editorState, blockKey),\n\t\t})\n\t};\n\n\tinsertTeX = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\tliveCustomBlockEdits: Map(),\n\t\t\teditorState: insertTeXBlock(prevState.editorState),\n\t\t}))\n\t};\n\n\tcreateTable = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\teditorState: createTable(prevState.editorState),\n\t\t}))\n\t}\n\n\thandleKeyCommand(command, editorState) {\n\t\tconst newState = RichUtils.handleKeyCommand(editorState, command)\n\t\tif (newState) {\n\t\t\tthis.onChange(newState)\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tmapKeyToEditorCommand(e) {\n\t\tif (e.keyCode === 9 /* TAB */) {\n\t\t\tconst newEditorState = RichUtils.onTab(\n\t\t\t\te,\n\t\t\t\tthis.state.editorState,\n\t\t\t\t4, /* maxDepth */\n\t\t\t)\n\t\t\tif (newEditorState !== this.state.editorState) {\n\t\t\t\tthis.onChange(newEditorState)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\t// eslint-disable-next-line consistent-return\n\t\treturn getDefaultKeyBinding(e)\n\t}\n\n\ttoggleBlockType(blockType) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleBlockType(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tblockType,\n\t\t\t),\n\t\t)\n\t}\n\n\ttoggleInlineStyle(inlineStyle) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleInlineStyle(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tinlineStyle,\n\t\t\t),\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { editorState } = this.state\n\n\t\t// If the user changes block type before entering any text, we can\n\t\t// either style the placeholder or hide it. Let's just hide it now.\n\t\tlet className = 'RichEditor-editor'\n\t\tconst contentState = editorState.getCurrentContent()\n\t\tif (!contentState.hasText()) {\n\t\t\tif (contentState.getBlockMap().first().getType() !== 'unstyled') {\n\t\t\t\tclassName += ' RichEditor-hidePlaceholder'\n\t\t\t}\n\t\t}\n\n\t\tconst loadPDF = () => {\n\t\t\tconvertToTeX(contentState)\n\t\t\tconsole.log('waiting for setState...')\n\t\t\tthis.setState({\n\t\t\t\tdata: allTeX,\n\t\t\t})\n\t\t\tconsole.log('finished setState!!!')\n\n\t\t\t/**\n\t\t\t * TODO load pdf\n\t\t\t * load pdf if and only if this.state.data is not empty and not equal to prevState.data\n\t\t\t */\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (Object.values(this.state.data).length !== 0) {\n\t\t\t\t\tsetTimeout(() => postData(this.state.data), 6000)\n\t\t\t\t\tsetTimeout(getPDF, 30000)\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Nothing you wrote')\n\t\t\t\t}\n\t\t\t}, 3000)\n\t\t}\n\n\t\tif (isMobile) {\n\t\t\treturn (\n\t\t\t\t<p>\n\t\t\t\t\tSorry, but\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<b>Eorg</b>\n\t\t\t\t\t&nbsp;\n\t\t\t\t\thaven&#39;t support on Mobile, please open it on PC.\n\t\t\t\t</p>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"double-column\">\n\t\t\t\t<div className=\"RichEditor-root\">\n\t\t\t\t\t<div className=\"Menu\">\n\t\t\t\t\t\t<BlockStyleControls\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\tonToggle={this.toggleBlockType}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InlineStyleControls\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\tonToggle={this.toggleInlineStyle}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"RichEditor-controls TeXEditor-insert\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={this.insertTeX}\n\t\t\t\t\t\t\t\tclassName=\"math RichEditor-styleButton\"\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMath\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<ModalTable\n\t\t\t\t\t\t\t\tonClick={this.createTable}\n\t\t\t\t\t\t\t\tbuttonLabel=\"Table\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={loadPDF}\n\t\t\t\t\t\t\t\tclassName=\"save\"\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tpreview\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* eslint-disable-next-line max-len */}\n\t\t\t\t\t{/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n\t\t\t\t\t<div className={className} onClick={this.focus}>\n\t\t\t\t\t\t<Editor\n\t\t\t\t\t\t\tblockRendererFn={this.blockRenderer}\n\t\t\t\t\t\t\tblockStyleFn={getBlockStyle}\n\t\t\t\t\t\t\tcustomStyleMap={styleMap}\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\thandleKeyCommand={this.handleKeyCommand}\n\t\t\t\t\t\t\tkeyBindingFn={this.mapKeyToEditorCommand}\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tplaceholder=\"Tell a story...\"\n\t\t\t\t\t\t\treadOnly={this.state.liveCustomBlockEdits.count()}\n\t\t\t\t\t\t\tref={this.editorRef}\n\t\t\t\t\t\t\tspellCheck\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<iframe\n\t\t\t\t\tid=\"pdf\"\n\t\t\t\t\ttitle=\"hello\"\n\t\t\t\t\twidth=\"47%\"\n\t\t\t\t\theight=\"300px\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n\tCODE: {\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.05)',\n\t\tfontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n\t\tfontSize: 16,\n\t\tpadding: 2,\n\t},\n}\n\nfunction getBlockStyle(block) {\n\tswitch (block.getType()) {\n\tcase 'blockquote':\n\t\treturn 'RichEditor-blockquote'\n\tdefault:\n\t\treturn null\n\t}\n}\n\nconst StyleButton = (props) => {\n\tconst onToggle = (e) => {\n\t\te.preventDefault()\n\t\tprops.onToggle(props.style)\n\t}\n\tlet className = 'RichEditor-styleButton'\n\tif (props.active) {\n\t\tclassName += ' RichEditor-activeButton'\n\t}\n\n\treturn (\n\t\t// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n\t\t<span className={className} onMouseDown={onToggle}>\n\t\t\t{props.label}\n\t\t</span>\n\t)\n}\n\nconst BLOCK_TYPES = [\n\t{ label: 'H1', style: 'header-one' },\n\t{ label: 'H2', style: 'header-two' },\n\t{ label: 'H3', style: 'header-three' },\n\t// {label: 'H4', style: 'header-four'},\n\t// {label: 'H5', style: 'header-five'},\n\t// {label: 'H6', style: 'header-six'},\n\t// {label: 'Blockquote', style: 'blockquote'},\n\t// {label: 'UL', style: 'unordered-list-item'},\n\t// {label: 'OL', style: 'ordered-list-item'},\n\t// {label: 'Code Block', style: 'code-block'},\n]\n\nconst BlockStyleControls = (props) => {\n\tconst { editorState } = props\n\tconst selection = editorState.getSelection()\n\tconst blockType = editorState\n\t\t.getCurrentContent()\n\t\t.getBlockForKey(selection.getStartKey())\n\t\t.getType()\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{BLOCK_TYPES.map((type) => (\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={type.style === blockType}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nconst INLINE_STYLES = [\n\t{ label: 'Bold', style: 'BOLD' },\n\t{ label: 'Italic', style: 'ITALIC' },\n\t{ label: 'Underline', style: 'UNDERLINE' },\n\t{ label: 'Monospace', style: 'CODE' },\n]\n\nconst InlineStyleControls = (props) => {\n\tconst currentStyle = props.editorState.getCurrentInlineStyle()\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{INLINE_STYLES.map((type) => (\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={currentStyle.has(type.style)}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default RichTextEditor\n","import React from 'react'\nimport './App.css'\nimport RichTextEditor from './components/RichTextEditor'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<RichTextEditor />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}